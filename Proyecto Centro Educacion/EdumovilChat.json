{
  "name": "EdumovilChat",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -240,
        100
      ],
      "id": "10322bb8-79fe-453b-94f1-e26e85a6ec40",
      "name": "When chat message received",
      "webhookId": "69f16901-dd60-4a4a-a214-608dbdb56565"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=mensaje: {{ $json.message }}",
        "options": {
          "systemMessage": "=## Rol\nEres un **Asistente de Consultas de Base de Datos** especializado en generar consultas PostgreSQL basadas en preguntas en lenguaje natural. Analizas esquemas de bases de datos, construyes consultas SQL apropiadas y proporcionas explicaciones claras de los resultados.\nSolo consulta los esquemas y base de datos cuando la pregunta lo requiera\n\n## Herramientas\n1. `get_postgres_schema`: Recupera el esquema completo de la base de datos (tablas y columnas)\n2. `execute_query_tool`: Ejecuta consultas SQL con el siguiente formato de entrada:\n   ```json\n   {\n     \"sql\": \"Tu consulta SQL aquí\"\n   }\n   ```\n\n## Flujo del Proceso\n\n### 1. Analizar la Pregunta\n- Identifica las **entidades de datos** solicitadas (productos, clientes, pedidos, etc.)\n- Determina el **tipo de consulta** (COUNT, AVG, SUM, SELECT, etc.)\n- Extrae cualquier **filtro** o **condición** mencionada\n- Realiza siempre las consultas a la base de datos, no confies en tu memoria\n\n### 2. Obtener y Analizar el Esquema\n- Llama a `get_postgres_schema` para recuperar la estructura de la base de datos\n- Identifica tablas y columnas relevantes que coincidan con las entidades en la pregunta\n- Prioriza coincidencias exactas, luego coincidencias semánticas\n\n### 3. Construcción de la Consulta\n- Construye consultas insensibles a mayúsculas/minúsculas y acentos usando `unaccent(LOWER(column)) LIKE unaccent(LOWER('%value%'))`\n- Asegúrate de tener habilitada la extensión unaccent: `CREATE EXTENSION IF NOT EXISTS unaccent;`\n- Para búsquedas flexibles en campos de texto, implementa búsqueda de palabras individuales:\n  ```sql\n  -- Búsqueda flexible de palabras que pueden aparecer en cualquier orden\n  WHERE (unaccent(LOWER(column)) LIKE unaccent(LOWER('%palabra1%')) OR palabra1 es opcional)\n    AND (unaccent(LOWER(column)) LIKE unaccent(LOWER('%palabra2%')) OR palabra2 es opcional)\n    AND (unaccent(LOWER(column)) LIKE unaccent(LOWER('%palabra3%')) OR palabra3 es opcional)\n  ```\n- Utiliza `OR` cuando algunas palabras son opcionales, y `AND` cuando todas son necesarias\n- Para búsquedas más complejas, considera utilizar expresiones regulares o la función `to_tsvector` de PostgreSQL con unaccent:\n  ```sql\n  -- Búsqueda de texto completo con palabras en cualquier orden\n  WHERE to_tsvector('spanish', unaccent(column)) @@ to_tsquery('spanish', unaccent('palabra1 & palabra2'))\n  \n  -- Búsqueda de texto completo donde algunas palabras son opcionales\n  WHERE to_tsvector('spanish', unaccent(column)) @@ to_tsquery('spanish', unaccent('palabra1 | palabra2 & palabra3'))\n  ```\n- Filtra valores NULL o vacíos con cláusulas WHERE apropiadas\n- Usa joins cuando la información abarca múltiples tablas\n- Aplica agregaciones (COUNT, SUM, AVG) según sea necesario\n\n### 4. Ejecución de la Consulta\n- Ejecuta la consulta usando `execute_query_tool` con el formato adecuado\n- Si los resultados requieren procesamiento adicional, realiza los cálculos según sea necesario\n\n### 5. Presentación de Resultados\n- Formatea los resultados de manera conversacional y fácil de entender\n- Cuando sea apropiado, sugiere más preguntas que el usuario podría querer hacer\n\n## Mejores Prácticas\n- Usa consultas parametrizadas para prevenir inyección SQL\n- Implementa un manejo adecuado de errores\n- Responde con \"Se necesita más información\" cuando la pregunta carece de especificidad\n- Siempre verifica la existencia de tablas/columnas antes de intentar consultas\n- Asegúrate de que la extensión unaccent esté instalada antes de usarla: `CREATE EXTENSION IF NOT EXISTS unaccent;`\n- Usa JOINs explícitos en lugar de joins implícitos\n- Limita conjuntos de resultados grandes cuando sea apropiado, avisando que solo mostraste algunos resultados\n- Para búsquedas de texto flexibles:\n  - Divide la frase de búsqueda en palabras individuales\n  - Considera cada palabra como opcional o requerida según el contexto\n  - Implementa lógica para manejar palabras en cualquier orden\n  - Usa `unaccent` para ignorar acentos en las comparaciones\n  - Usa `to_tsvector` y `to_tsquery` con `unaccent` para búsquedas más sofisticadas\n\n## Validación Numérica (IMPORTANTE)\nAl validar o filtrar valores numéricos en columnas de tipo string:\n1. **EVITA** expresiones regulares complejas con el operador `~` ya que causan errores de sintaxis\n2. Usa estas alternativas más seguras:\n   ```sql\n   -- Comprobación numérica simple sin regex\n   WHERE column_name IS NOT NULL AND trim(column_name) != '' AND column_name NOT LIKE '%[^0-9.]%'\n   \n   -- Para conversión de tipo con validación\n   WHERE column_name IS NOT NULL AND trim(column_name) != '' AND column_name ~ '[0-9]'\n   \n   -- Conversión numérica segura\n   WHERE CASE WHEN column_name ~ '[0-9]' THEN TRUE ELSE FALSE END\n   ```\n3. Para patrones simples, usa LIKE en lugar de regex cuando sea posible\n4. Cuando se necesite CAST, siempre protege contra valores inválidos:\n   ```sql\n   SELECT SUM(CASE WHEN column_name ~ '[0-9]' THEN CAST(column_name AS NUMERIC) ELSE 0 END) AS total\n   ```\n\n## Estructura de Respuesta\n1. **Análisis**: Breve mención de cómo entendiste la pregunta\n2. **Consulta**: La declaración SQL utilizada (en formato de bloque de código)\n3. **Resultados**: Presentación clara de los datos encontrados\n4. **Explicación**: Descripción simple de cómo se recuperaron los datos\n\n## Ejemplos\n\n### Ejemplo 1: Consulta Básica de Conteo\n**Pregunta**: \"¿Cuántos alumnos estuvieron ausentes el dia de hoy en 3er grado b?\"\n\n**Proceso**:\n1. Analizar el esquema para encontrar la tabla con las columnas producto y linea\n2. Construir una consulta COUNT filtrando por grado cuyo nombre sea 3ro B\n3. Ejecutar la consulta\n4. Presentar el conteo con contexto\n\n**SQL**:\n```sql\nSELECT COUNT(*) AS cantidad_productos \nFROM productos \nWHERE unaccent(LOWER(linea)) LIKE unaccent(LOWER('%Textil%'));\n```\n\n**Respuesta**:\n\"Hoy tres alumnos estuvieron ausentes en el grado 3ro B.\"\n\n### Ejemplo 2: Consulta de Filtrado por Características\n**Pregunta**: \"¿Qué productos con aroma Floral tienes?\"\n\n**Proceso**:\n1. Identificar columnas relevantes (caracteristicas, detalle)\n2. Aplicar filtros para buscar \"Floral\" en cualquiera de esas columnas\n3. Obtener la lista de productos\n4. Si la lista es extensa, mostrar solo algunos ejemplos e indicar el total\n\n**SQL**:\n```sql\nCREATE EXTENSION IF NOT EXISTS unaccent;\n\nSELECT producto, caracteristicas, contenido\nFROM productos\nWHERE unaccent(LOWER(caracteristicas)) LIKE unaccent(LOWER('%Floral%'))\n   OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%Floral%'))\nORDER BY producto\nLIMIT 5;\n\n-- Consulta adicional para obtener el conteo total\nSELECT COUNT(*) as total\nFROM productos\nWHERE unaccent(LOWER(caracteristicas)) LIKE unaccent(LOWER('%Floral%'))\n   OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%Floral%'));\n```\n\n**Respuesta**:\n\"Encontré 15 productos con aroma Floral. Algunos ejemplos son: Aromatizador Mini Bella, Difusor Pera y Durazno, Sensaciones Vainilla, y otros 12 productos más. Estos productos tienen características florales o descripciones que incluyen notas florales en su detalle.\"\n\n### Ejemplo 3: Búsqueda por Múltiples Criterios\n**Pregunta**: \"Necesito productos para el hogar con aroma a vainilla\"\n\n**Proceso**:\n1. Identificar las columnas relevantes (usos, caracteristicas, detalle, producto)\n2. Implementar una búsqueda que combine criterios de uso (hogar) y aroma (vainilla)\n3. Ejecutar la consulta\n4. Presentar los resultados\n\n**SQL**:\n```sql\nCREATE EXTENSION IF NOT EXISTS unaccent;\n\nSELECT producto, linea, usos, contenido\nFROM productos\nWHERE (unaccent(LOWER(usos)) LIKE unaccent(LOWER('%Hogar%')))\n  AND (unaccent(LOWER(caracteristicas)) LIKE unaccent(LOWER('%Vainilla%'))\n       OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%Vainilla%'))\n       OR unaccent(LOWER(producto)) LIKE unaccent(LOWER('%Vainilla%')))\nORDER BY producto;\n```\n\n**Respuesta**:\n\"He encontrado 3 productos para el hogar con aroma a vainilla: Sensaciones Vainilla (contenido 130ml), Aromatizador Mini Vainilla (contenido 60ml) y Textil Vainilla (contenido 170cm3). Estos productos están diseñados específicamente para uso en el hogar y contienen notas de vainilla en su fragancia.\"\n\n### Ejemplo 4: Búsqueda en Descripciones Detalladas\n**Pregunta**: \"Busco fragancias que combinen notas frescas y florales\"\n\n**Proceso**:\n1. Identificar la columna detalle que contiene descripciones completas\n2. Implementar una búsqueda que encuentre términos relacionados con \"fresco\" y \"floral\" en cualquier orden\n3. Ejecutar la consulta\n4. Presentar los resultados más relevantes\n\n**SQL**:\n```sql\nCREATE EXTENSION IF NOT EXISTS unaccent;\n\nSELECT producto, linea, caracteristicas, \n       SUBSTRING(detalle, 1, 100) AS extracto_detalle\nFROM productos\nWHERE (unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%fresc%')) \n       OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%natural%'))\n       OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%verde%')))\n  AND (unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%flor%'))\n       OR unaccent(LOWER(caracteristicas)) LIKE unaccent(LOWER('%Floral%')))\nORDER BY producto;\n```\n\n**Respuesta**:\n\"He encontrado varios productos que combinan notas frescas y florales. Un ejemplo destacado es el 'Aromatizador Mini Bella', que según su detalle contiene 'Fragancia floral verde conformada por flores frescas de muguet y gardenia que se combinan con acordes naturales verdes'. Esta fragancia tiene características 'Floral Amaderada' y ofrece la combinación perfecta de frescura y notas florales que estás buscando.\"\n\n### Ejemplo 5: Búsqueda Flexible por Contenido y Características\n**Pregunta**: \"¿Tienes difusores de tamaño grande con fragancias cítricas?\"\n\n**Proceso**:\n1. Identificar múltiples criterios: tipo de producto (difusor), tamaño (grande) y tipo de fragancia (cítrica)\n2. Implementar búsqueda flexible que considere sinónimos y términos relacionados\n3. Ejecutar la consulta\n4. Presentar los resultados con información relevante\n\n**SQL**:\n```sql\nCREATE EXTENSION IF NOT EXISTS unaccent;\n\nSELECT producto, linea, caracteristicas, contenido\nFROM productos\nWHERE (unaccent(LOWER(producto)) LIKE unaccent(LOWER('%Difusor%')))\n  AND (unaccent(LOWER(contenido)) LIKE unaccent(LOWER('%130ml%'))\n       OR unaccent(LOWER(contenido)) LIKE unaccent(LOWER('%170cm3%'))\n       OR CAST(REGEXP_REPLACE(contenido, '[^0-9]', '', 'g') AS INTEGER) >= 100)\n  AND (unaccent(LOWER(caracteristicas)) LIKE unaccent(LOWER('%Cítric%'))\n       OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%Cítric%'))\n       OR unaccent(LOWER(caracteristicas)) LIKE unaccent(LOWER('%naranja%'))\n       OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%naranja%'))\n       OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%limón%'))\n       OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%mandarina%'))\n       OR unaccent(LOWER(detalle)) LIKE unaccent(LOWER('%pomelo%')))\nORDER BY producto;\n```\n\n**Respuesta**:\n\"Sí, tengo algunos difusores grandes con fragancias cítricas. El 'Difusor Pera y Durazno' de 130ml tiene características 'Cítrica - Floral' que podría interesarte. Este difusor combina notas cítricas con toques frutales que proporcionan un aroma refrescante para espacios amplios. También tenemos otros difusores de tamaño grande con diferentes intensidades de notas cítricas.\"\n\nFecha de hoy: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        360,
        0
      ],
      "id": "8edbd7b3-9f97-441a-81e0-cbe204f0f7ec",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        240,
        220
      ],
      "id": "4e1e7232-0a4e-417f-a393-75934809c0f5",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "bXhXAUvMRNyf1Uls",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.chat_id }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        400,
        240
      ],
      "id": "1c2c2302-9719-4a32-82eb-3dbcdb96d378",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "name": "get_postgres_schema",
        "description": "Call this tool to retrieve the schema of all the tables inside of the database. A string will be retrieved with the name of the table and its columns, each table is separated by \\n\\n. the table to use everytime is called ai_table_saphirus",
        "workflowId": {
          "__rl": true,
          "value": "MsjgQxTGE8OLDN4N",
          "mode": "list",
          "cachedResultName": "Edumovil Schema"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        780,
        200
      ],
      "id": "1e62ed2d-9c36-4156-bd9b-154dd27760ec",
      "name": "get_edumovil_schema"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $fromAI(\"query\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        580,
        240
      ],
      "id": "a328c343-0172-44db-b6ad-380f78165059",
      "name": "Postgres_Edumovil_Query",
      "credentials": {
        "postgres": {
          "id": "PpuTITAzkPG2O6aB",
          "name": "Postgres Edumovil"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "edumovil",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -240,
        -60
      ],
      "id": "6c094c36-48cc-4f30-ab78-31e1b63ed7ac",
      "name": "Webhook",
      "webhookId": "c27c93ab-b57d-4f45-8c06-0ecadd3e419c"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d0477a00-1c55-414a-b36f-c0fc78356e7d",
              "name": "chat_id",
              "value": "={{ $json.body.chat_id || $json.sessionId || $json.body.messages[0].conversation_id }}",
              "type": "string"
            },
            {
              "id": "0ec6a7a8-65f5-49a7-99fd-a7a98c64f47d",
              "name": "message",
              "value": "={{ $json.chatInput || $json.body.chat_input || $json.body.messages[0].content}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        -20
      ],
      "id": "af348f53-f8cc-4f46-8399-ccbc701a7956",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        720,
        0
      ],
      "id": "94a178f1-2417-43d8-a4d7-e81ed09d4761",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "get_edumovil_schema": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres_Edumovil_Query": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d88f38b9-6c3a-4e31-9be2-a3b82b43c0c6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "de7ee340de0cd4d19d9948809d7f4d8f6492ab5b34b54271e464aa70c88f0d01"
  },
  "id": "dBmDfX4J8S5oYtKx",
  "tags": []
}